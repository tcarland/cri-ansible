---
- name: Download and Install containerd
  block:
  - name: Acquire containerd archive
    get_url:
      url: '{{ containerd_url }}/{{ containerd_archive }}'
      dest: '/tmp/{{ containerd_archive }}'
      checksum: 'sha256:{{ containerd_sha256 }}'
      mode: '0444'
  - name: Extract containerd archive
    unarchive: 
      src: '/tmp/{{ containerd_archive }}'
      dest: '/usr/local'
      remote_src: 'yes'
  - name: Cleanup containerd archive
    file:
      path: '/tmp/{{ containerd_archive }}'
      state: absent
  - name: Create containerd config dirs
    file:
      path: '/etc/containerd/certs.d'
      state: directory
      mode: '0755'
  - name: Configure containerd
    shell: 'containerd config default > /etc/containerd/config.toml'
  - name: Install service config (system)
    copy:
      src: 'containerd.service'
      dest: '/etc/systemd/system/containerd.service'
      mode: '0644'
  - name: Enable systemd service
    systemd:
      name: 'containerd'
      daemon_reload: true
      enabled: true
      state: started
  become: true

- name: Install system CNI config
  template: 
    src: '10-cri-net.conf.j2'
    dest: '/etc/cni/net.d/10-cri-net.conf'
    mode: '0644'
  become: true

- name: Set userspace CNI config
  block:
  - name: Ensure user CNI config dir exists
    file:
      path: '~/.config/cni/net.d'
      state: directory
      mode: '0755'
  - name: Configure userspace CNI
    template:
      src: '10-cri-net.conf.j2'
      dest: '~/.config/cni/net.d/10-cri-net.conf'
      mode: '0644'
  become: true
  when: set_user_cni_config == true and enable_rootlesskit == true

- name: Configure Private Registry 
  block:
  - name: Create Registry path
    file:
      path: '/etc/containerd/certs.d/{{ registry_host }}'
      state: directory
      mode: '0755'
  - name: Create Registry hosts config
    template:
      src: 'hosts.toml.j2'
      dest: '/etc/containerd/certs.d/{{ registry_host }}/hosts.toml'
      mode: '0644'
  become: true
  when: registry_host

- ansible.builtin.include_tasks: "nerdctl.yml"
  when: enable_nerdctl == true or enable_rootlesskit == true
